export const DSA = [
    {
        question: "What is the time complexity of inserting an element at the end of an array in JavaScript?",
        option1: "O(1)",
        option2: "O(n)",
        option3: "O(log n)",
        option4: "O(n log n)",
        answer: 1,
    },
    {
        question: "What is the time complexity of inserting an element at the end of an array in JavaScript?",
        option1: "O(1)",
        option2: "O(n)",
        option3: "O(log n)",
        option4: "O(n log n)",
        answer: 1,
        },
        {
            question: "What is the time complexity of finding an element in a sorted array using binary search?",
            option1: "O(1)",
            option2: "O(log n)",
            option3: "O(n)",
            option4: "O(n log n)",
            answer: 2,
        },
        {
            question: "Which data structure follows the Last In, First Out (LIFO) principle?",
            option1: "Queue",
            option2: "Stack",
            option3: "Heap",
            option4: "Linked List",
            answer: 2,
        },
        {
            question: "What is the time complexity of inserting an element at the beginning of an array?",
            option1: "O(1)",
            option2: "O(n)",
            option3: "O(log n)",
            option4: "O(n log n)",
            answer: 2,
        },
        {
            question: "What is the time complexity of deleting an element from the end of an array?",
            option1: "O(1)",
            option2: "O(n)",
            option3: "O(log n)",
            option4: "O(n log n)",
            answer: 1,
        },
        {
            question: "Which sorting algorithm has the best average-case time complexity?",
            option1: "Bubble Sort",
            option2: "Merge Sort",
            option3: "Insertion Sort",
            option4: "Quick Sort",
            answer: 4,
        },
        {
            question: "What is the space complexity of a recursive algorithm with O(n) time complexity?",
            option1: "O(n)",
            option2: "O(log n)",
            option3: "O(1)",
            option4: "O(n log n)",
            answer: 2,
        },
        {
            question: "Which data structure is used to implement a priority queue?",
            option1: "Stack",
            option2: "Queue",
            option3: "Binary Search Tree",
            option4: "Heap",
            answer: 4,
        },
        {
            question: "Which algorithm is used to traverse a binary search tree in order?",
            option1: "Depth-First Search (DFS)",
            option2: "Breadth-First Search (BFS)",
            option3: "Inorder Traversal",
            option4: "Preorder Traversal",
            answer: 3,
        },
        {
            question: "What is the time complexity of a bubble sort algorithm in the worst case?",
            option1: "O(1)",
            option2: "O(n)",
            option3: "O(n log n)",
            option4: "O(n^2)",
            answer: 4,
        },
        {
            question: "Which data structure is typically used for implementing a graph?",
            option1: "Array",
            option2: "Linked List",
            option3: "Hash Table",
            option4: "Adjacency List",
            answer: 4,
        },
        {
            question: "What is the time complexity of finding an element in a hash table with a good hash function?",
            option1: "O(1)",
            option2: "O(log n)",
            option3: "O(n)",
            option4: "O(n log n)",
            answer: 1,
        },
        {
            question: "Which search algorithm can be applied to both sorted and unsorted arrays?",
            option1: "Linear Search",
            option2: "Binary Search",
            option3: "Depth-First Search",
            option4: "Breadth-First Search",
            answer: 1,
        },
        {
            question: "What is the time complexity of merging two sorted arrays of lengths m and n?",
            option1: "O(m + n)",
            option2: "O(m * n)",
            option3: "O(log(m + n))",
            option4: "O(m log n)",
            answer: 1,
        },
        {
            question: "Which sorting algorithm is known for its stability?",
            option1: "Quick Sort",
            option2: "Heap Sort",
            option3: "Merge Sort",
            option4: "Bubble Sort",
            answer: 3,
        }

]